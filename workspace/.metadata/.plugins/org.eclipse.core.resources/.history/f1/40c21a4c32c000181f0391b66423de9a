import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

/*
 * DataSet.java
 * Copyright (c) 2018 Georgetown University.  All Rights Reserved.
 */

public class DataSet {

	protected String name;	// the name of this data set
	protected Attributes attributes = null;	// the attributes of this data set
	protected Examples examples = null;	// the examples of this data set
	protected Random random;	// a random-number generator

	/**
	 * Default constructor
	 */
	public DataSet() {

	}
	/**
	 * Explicit constructor
	 * @param attributes - the attributes for this data set
	 */
	public DataSet( Attributes attributes ) {
		this.attributes = attributes;
	}
	/**
	 * Adds the specified example to this data set
	 * @param example - the example to be added
	 */
	public void add( Example example ) {
		// check if examples is set
		if(this.examples == null) {
			// update later
			this.examples = new Examples(this.attributes);
		}
		this.examples.add(example);
	}
	/**
	 * Gets the attributes of this DataSet object.
	 * @return the attributes of this data set
	 */
	public Attributes getAttributes() {
		return this.attributes;
	}
	/**
	 * Gets the examples of this data set.
	 * @return the examples of this data set
	 */
	public Examples getExamples() {
		return this.examples;
	}
	/**
	 * Returns true if this data set has numeric attributes; returns false otherwise.
	 * @return true if this data set has numeric attributes
	 */
	public boolean getHasNumericAttributes() {
		// update later
		return false;
	}
	/**
	 * Loads a data set from the specified file.
	 * @param filename - the file from which to read
	 * @throws Exception - if the file is not found or if a parsing exception occurs
	 */
	public void load( String filename ) throws Exception {
		this.attributes = new Attributes();
		BufferedReader reader = null;
		try {
			File file = new File(filename);
			reader = new BufferedReader(new FileReader(file));
			boolean isReadEx = false; // when true, read examples
			String line = "";
			while( (line = reader.readLine()) != null ) {
				if(line.contains("@dataset")) {
					// dataset section
					this.name = line.split(" ")[1].trim();
				}
				else if(line.contains("@attribute")) {
					// attribute section
					/*
					String[] lineElem = line.split(" ");
					String attrName = lineElem[1];
					if(lineElem[1].trim().equals("numeric")) {
						// this is a numeric attribute
					}
					else {
						// this is a nominal attribute
						String[] attrDomain = Arrays.copyOfRange(lineElem, 2, lineElem.length);	// attribute domain
						
					}
					*/
					// add this attribute to an array
					AttributeFactory.make(new Scanner(line));
					this.attributes.add(new Attribute(attrName));
				}
				else if(line.contains("@examples")) {
					isReadEx = true;
				}
				else if(isReadEx) {
					// read and store this example
					String[] lineElem = line.split(" ");
					
				}
			}
		}
		catch(Exception e) {
			System.err.println("Error while reading a file: \"" + filename + "\"");
			e.printStackTrace();
		}
		finally {
			reader.close();
		}
	}
	/**
	 * Parses a data set from the specified scanner, which consists of parsing the data set's header, attributes, and examples.
	 * @param scanner - a scanner containing the data set's tokens
	 * @throws Exception - if a parsing exception occurs
	 */
	private void parse( Scanner scanner ) throws Exception {
		// update later
	}
	/**
	 * Sets the random-number generator for this data set.
	 * @param random - the random-number generator
	 */
	public void setRandom( Random random ) {
		this.random = random;
	}
	/**
	 * Returns a string representation of the data set in a format identical to that of the file format.
	 */
	public String toString() {
		// update later
		return null;
	}

}
